// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexsibrin/runbot-auth/internal/api/controllers (interfaces: IAccountUsecase,ISecurer)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/mocks_controllers.go -package controllers_test github.com/alexsibrin/runbot-auth/internal/api/controllers IAccountUsecase,ISecurer
//

// Package controllers_test is a generated GoMock package.
package controllers_test

import (
	context "context"
	reflect "reflect"

	entities "github.com/alexsibrin/runbot-auth/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountUsecase is a mock of IAccountUsecase interface.
type MockIAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountUsecaseMockRecorder
}

// MockIAccountUsecaseMockRecorder is the mock recorder for MockIAccountUsecase.
type MockIAccountUsecaseMockRecorder struct {
	mock *MockIAccountUsecase
}

// NewMockIAccountUsecase creates a new mock instance.
func NewMockIAccountUsecase(ctrl *gomock.Controller) *MockIAccountUsecase {
	mock := &MockIAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockIAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountUsecase) EXPECT() *MockIAccountUsecaseMockRecorder {
	return m.recorder
}

// ChangeAccountStatus mocks base method.
func (m *MockIAccountUsecase) ChangeAccountStatus(arg0 context.Context, arg1 string, arg2 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAccountStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAccountStatus indicates an expected call of ChangeAccountStatus.
func (mr *MockIAccountUsecaseMockRecorder) ChangeAccountStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAccountStatus", reflect.TypeOf((*MockIAccountUsecase)(nil).ChangeAccountStatus), arg0, arg1, arg2)
}

// GetOneByEmail mocks base method.
func (m *MockIAccountUsecase) GetOneByEmail(arg0 context.Context, arg1 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByEmail", arg0, arg1)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByEmail indicates an expected call of GetOneByEmail.
func (mr *MockIAccountUsecaseMockRecorder) GetOneByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByEmail", reflect.TypeOf((*MockIAccountUsecase)(nil).GetOneByEmail), arg0, arg1)
}

// GetOneByUUID mocks base method.
func (m *MockIAccountUsecase) GetOneByUUID(arg0 context.Context, arg1 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByUUID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByUUID indicates an expected call of GetOneByUUID.
func (mr *MockIAccountUsecaseMockRecorder) GetOneByUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByUUID", reflect.TypeOf((*MockIAccountUsecase)(nil).GetOneByUUID), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockIAccountUsecase) SignIn(arg0 context.Context, arg1, arg2 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAccountUsecaseMockRecorder) SignIn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAccountUsecase)(nil).SignIn), arg0, arg1, arg2)
}

// SignUp mocks base method.
func (m *MockIAccountUsecase) SignUp(arg0 context.Context, arg1 *entities.Account) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAccountUsecaseMockRecorder) SignUp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAccountUsecase)(nil).SignUp), arg0, arg1)
}

// MockISecurer is a mock of ISecurer interface.
type MockISecurer struct {
	ctrl     *gomock.Controller
	recorder *MockISecurerMockRecorder
}

// MockISecurerMockRecorder is the mock recorder for MockISecurer.
type MockISecurerMockRecorder struct {
	mock *MockISecurer
}

// NewMockISecurer creates a new mock instance.
func NewMockISecurer(ctrl *gomock.Controller) *MockISecurer {
	mock := &MockISecurer{ctrl: ctrl}
	mock.recorder = &MockISecurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecurer) EXPECT() *MockISecurerMockRecorder {
	return m.recorder
}

// AccessToken mocks base method.
func (m *MockISecurer) AccessToken(arg0 *entities.Account) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessToken indicates an expected call of AccessToken.
func (mr *MockISecurerMockRecorder) AccessToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockISecurer)(nil).AccessToken), arg0)
}

// Decrypt mocks base method.
func (m *MockISecurer) Decrypt(arg0 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockISecurerMockRecorder) Decrypt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockISecurer)(nil).Decrypt), arg0)
}

// RefreshToken mocks base method.
func (m *MockISecurer) RefreshToken(arg0 *entities.Account) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockISecurerMockRecorder) RefreshToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockISecurer)(nil).RefreshToken), arg0)
}
