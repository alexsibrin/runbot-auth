// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexsibrin/runbot-auth/internal/api/rest/v1/handlers (interfaces: IAccountController)
//
// Generated by this command:
//
//	mockgen -destination mocks/resthandlers_mocks.go -package resthandlers_test github.com/alexsibrin/runbot-auth/internal/api/rest/v1/handlers IAccountController
//

// Package resthandlers_test is a generated GoMock package.
package resthandlers_test

import (
	context "context"
	reflect "reflect"

	models "github.com/alexsibrin/runbot-auth/internal/api/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountController is a mock of IAccountController interface.
type MockIAccountController struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountControllerMockRecorder
}

// MockIAccountControllerMockRecorder is the mock recorder for MockIAccountController.
type MockIAccountControllerMockRecorder struct {
	mock *MockIAccountController
}

// NewMockIAccountController creates a new mock instance.
func NewMockIAccountController(ctrl *gomock.Controller) *MockIAccountController {
	mock := &MockIAccountController{ctrl: ctrl}
	mock.recorder = &MockIAccountControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountController) EXPECT() *MockIAccountControllerMockRecorder {
	return m.recorder
}

// GetOneByEmail mocks base method.
func (m *MockIAccountController) GetOneByEmail(arg0 context.Context, arg1 string) (*models.AccountGetModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.AccountGetModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByEmail indicates an expected call of GetOneByEmail.
func (mr *MockIAccountControllerMockRecorder) GetOneByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByEmail", reflect.TypeOf((*MockIAccountController)(nil).GetOneByEmail), arg0, arg1)
}

// GetOneByUUID mocks base method.
func (m *MockIAccountController) GetOneByUUID(arg0 context.Context, arg1 string) (*models.AccountGetModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByUUID", arg0, arg1)
	ret0, _ := ret[0].(*models.AccountGetModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByUUID indicates an expected call of GetOneByUUID.
func (mr *MockIAccountControllerMockRecorder) GetOneByUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByUUID", reflect.TypeOf((*MockIAccountController)(nil).GetOneByUUID), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockIAccountController) RefreshToken(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIAccountControllerMockRecorder) RefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIAccountController)(nil).RefreshToken), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockIAccountController) SignIn(arg0 context.Context, arg1 *models.SignIn) (*models.SignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*models.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAccountControllerMockRecorder) SignIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAccountController)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockIAccountController) SignUp(arg0 context.Context, arg1 *models.SignUp) (*models.SignUpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*models.SignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAccountControllerMockRecorder) SignUp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAccountController)(nil).SignUp), arg0, arg1)
}
